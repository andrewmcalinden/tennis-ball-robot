This are simple python scripts  issues basic commands to 
the LS7366 pulse counter

First check if SPI devie is visible, on R-Pi2 you want to use '0.0'
$ ls /dev |grep spi
spidev0.0
spidev0.1

Next check if driver is active:
$  lsmod | grep spi
spi_bcm2835             7248  0 

This is LS7366 chip description
https://drive.google.com/drive/u/1/folders/0B0Jn-k3UAPZLdVA5YTVmODRsbDQ


1) ------- only set pulse counting mode:
pulse-counter to be 2x8 bit long , and to count 4 counts per quadrature cycle


Execute :  rwMDR01.py

Correct answer:
RD:MDR0  cmd=0x48=0b1001000 -->  ans=0x3=0b11
RD:MDR1  cmd=0x50=0b1010000 -->  ans=0x0=0b10

If pulse-counter is power cycled both registers are set to 0

2)--------- Manually write/read CNTR counter. Needs to be done via DRT register.
Execute:  rwCNTR.py

Correct value before reseting at the end is : 0xCA
RD:CNTR  cmd=0x67=0b1100111 --> 
   wr-data: 0x0=0b0   0x0=0b0   0xC1=0b11000001   0xC2=0b11000010   
   rd-data: 0xCA 

3)----------- read CNTR via OTR , includes setting of MDR0,MDR1
Does NOT  set CNTR
rdCNTRviaOTR.py



4)----------- read CNTR in infinite loop, assemble 32-bit counter every 0.5 sec.
Note, for proper working the MDR0,MDR1 registers must be loaded properly
./rdPulseDireect.py

If you move in one direction you see pulse counter increasing
6  nPules= 2789
RD:CNTR  cmd=0x67=0b1100111 --> 
   rd-data: 0x0=0b0   0x0=0b0   0xA=0b1010   0xF7=0b11110111   
7  nPules= 2807
RD:CNTR  cmd=0x67=0b1100111 --> 
   rd-data: 0x0=0b0   0x0=0b0   0xB=0b1011   0xD=0b1101   
8  nPules= 2829


